@page "/snakegame"

<div @onkeydown="KeyDownHandler">
	<div id="grid" style="z-index: @(zindex ? 1 : 0)">
		<div class="parent">
			<p style="text-align: left;">Score: @Score</p>
			<p style="text-align: right;">High Score: @HighScore</p>
		</div>
		@for (int i = 0; i < RowsAmount; i++)
		{
			<div id="grid-row">
				@for (int j = 0; j < ColsAmount; j++)
				{
					var color = CellColor(i, j);
					<div style="background: @color; 
								width: @(450 / ColsAmount)px;
								height: @(450 / RowsAmount)px;"></div>
				}
			</div>
		}
	</div>

	<div id="window-settings" style="z-index: @(!zindex ? 1 : 0)">
		<div id="inner-window">
			<div>
				<button @onclick="Play">Play</button>
			</div>
			<div>
				<p style="font-size: 30px">High Score: @HighScore</p>
			</div>
			<div>
				<label for="areasize">Area Size</label>
				<input type="range" name="areasize"
					   min="0" max="2" step="1" @bind="AreaSize">
			</div>
			<div>
				<label for="speed">Speed</label>
				<input type="range" name="speed"
					   min="0" max="2" step="1" @bind="Speed">
			</div>
			<div>
				<label for="appleamount">Apple Amount</label>
				<input type="range" name="appleamount"
					   min="1" max="5" step="2" @bind="AppleAmount">
			</div>
		</div>
	</div>
</div>





@code
{
	private int AreaSize = 1;

	private int Speed = 1;

	private int AppleAmount = 1;

	private int RowsAmount = 18;

	private int ColsAmount = 18;

	private int Score = 0;

	private int HighScore = 0;

	private Point Direction = new Point(0, 1);

	private bool Moved = true;

	private List<Point> Snake = new List<Point> 
	{ 
		new Point(3, 4), 
		new Point(3, 3),
		new Point(3, 2)
	};

	private List<Point> Apple = new List<Point> 
	{ 
		new Point(3, 7),
	};

	private string CellColor(int row, int col)
	{	
		string result = "";
		if (new Point(row, col) == Snake[0])
		{
			result = "darkblue";
		}
		else if (Point.ContainsInList(new Point(row, col), Snake) >= 0)
		{
			result = "royalblue";
		}
		else if (Point.ContainsInList(new Point(row, col), Apple) >= 0)
		{
			result = "red";
		}
		else if ((row + col) % 2 == 0)
		{
			result = "greenyellow";
		}
		else
		{
			result = "lightgreen";
		}
		return result;
	}

	private bool IsRunning = false;

	private Timer timer;

	private bool zindex = false;

	private void Play()
	{
		zindex = true;
		RowsAmount = AreaSize == 0 ? 10 : AreaSize == 1 ? 18 : 30;
		ColsAmount = AreaSize == 0 ? 10 : AreaSize == 1 ? 18 : 30;
		Apple = AppleAmount == 1 ?
			new List<Point>
				{
				new Point(3, 7),
				}
			: AppleAmount == 3 ?
			new List<Point>
				{
				new Point(3, 7),
				new Point(2, 6),
				new Point(4, 6),
				}
			:
			new List<Point>
				{
				new Point(3, 7),
				new Point(2, 6),
				new Point(2, 8),
				new Point(4, 6),
				new Point(4, 8),
				};
	}

	private void Start()
	{
		if (!IsRunning)
		{
			timer = new Timer(Update, null, 0, Speed == 0 ? 400 : Speed == 1 ? 200 : 100);
			IsRunning = true;
		}
	}

	private void Stop()
	{
		if (IsRunning)
		{
			timer?.Dispose();
			IsRunning = false;
		}
	}

	private void Reset()
	{
		Initial();
		Stop();
	}

	private void Next()
	{
		if (CheckOutOfBounds(Snake[0] + Direction) || Snake.Count != Snake.Distinct().Count() || 
			Snake.Count == ColsAmount * RowsAmount)
		{
			Reset();
		}
		else
		{
			Snake.Insert(0, Snake[0] + Direction);
			var t = Snake[0].ContainsInList(Apple);
			if (t >= 0)
			{
				Apple.RemoveAt(t);
				Score++;
				if (Apple.Count + Snake.Count < ColsAmount * RowsAmount) Apple.Add(SpawnApple());
			}
			else
			{
				Snake.RemoveAt(Snake.Count - 1);
			}
			Moved = true;
		}		
	}

	private void Update(object state)
	{
		Next();
		//Moved = true;
		InvokeAsync(StateHasChanged);
	}

	private void KeyDownHandler(KeyboardEventArgs e)
	{
		if (Moved && zindex)
		{
			Start();
			if (!IsRunning) IsRunning = true;
			if ((e.Key == "ArrowLeft" || e.Key == "a") && Direction.Y == 0)
			{
				Direction = new Point(0, -1);
				//Next();
				Moved = false;
			}
			else if ((e.Key == "ArrowRight" || e.Key == "d") && Direction.Y == 0)
			{
				Direction = new Point(0, 1);
				//Next();
				Moved = false;
			}
			else if ((e.Key == "ArrowUp" || e.Key == "w") && Direction.X == 0)
			{
				Direction = new Point(-1, 0);
				//Next();
				Moved = false;
			}
			else if ((e.Key == "ArrowDown" || e.Key == "s") && Direction.X == 0)
			{
				Direction = new Point(1, 0);
				//Next();
				Moved = false;
			}
			else if (e.Key == "p")
			{
				Stop();
			}
			else if (e.Key == "Escape")
			{
				Reset();
			}
			//Moved = true;
		}
	}

	private bool CheckOutOfBounds(Point a)
	{
		bool result = false;
		if (a.X < 0 || a.X >= RowsAmount || a.Y < 0 || a.Y >= ColsAmount)
		{
			result = true;
		}
		return result;
	}

	private Random r = new Random();

	private Point SpawnApple()
	{
		Point result = new Point(r.Next(0, RowsAmount), r.Next(0, ColsAmount));
		while (result.ContainsInList(Snake) >=0 || result.ContainsInList(Apple) >= 0)
		{
			result = new Point(r.Next(0, RowsAmount), r.Next(0, ColsAmount));
		}
		return result;
	}

	private void Initial()
	{
		Snake = new List<Point>
		{
			new Point(3, 4),
			new Point(3, 3),
			new Point(3, 2)
		};
		Apple = AppleAmount == 1 ?
			new List<Point>
				{
				new Point(3, 7),
				}
			: AppleAmount == 3 ?
			new List<Point>
				{
				new Point(3, 7),
				new Point(2, 6),
				new Point(4, 6),
				}
			:
			new List<Point>
				{
				new Point(3, 7),
				new Point(2, 6),
				new Point(2, 8),
				new Point(4, 6),
				new Point(4, 8),
				};
		Direction = new Point(0, 1);
		Moved = true;
		HighScore = Score > HighScore ? Score : HighScore;
		Score = 0;
		zindex = false;
	}
}

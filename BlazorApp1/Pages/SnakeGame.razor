@page "/snakegame"

<div class="row" @onkeydown="KeyHandler" @onkeydown:preventDefault>
	<div class="column">
		<div id="grid">

			@for (int i = 0; i < RowsAmount; i++)
			{
				<div id="grid-row">
					@for (int j = 0; j < ColsAmount; j++)
					{
						var color = CellColor(i, j);
						<div style="background: @color"></div>
					}
				</div>
			}
		</div>
	</div>

	<div class="column">
		<div>
			<button @onclick="StartStopwatch">Start</button>
		</div>
		<div>
			<button @onclick="StopStopwatch">Stop</button>
		</div>
		<div>
			<button @onclick="ResetStopwatch">Reset</button>
		</div>
		<div>
			<p style="font-size: 30px">Score: @Score</p>
		</div>
	</div>
</div>



@code
{
	private int RowsAmount = 15;
	private int ColsAmount = 27;

	private int Score = 0;

	private Point Direction = new Point(0, 1);

	private List<Point> Direct = new List<Point>();

	private List<Point> Snake = new List<Point> 
	{ 
		new Point(7, 4), 
		new Point(7, 3),
		new Point(7, 2)
	};

	private List<Point> Apple = new List<Point> 
	{ 
		new Point(7, 10)
	};

	private string CellColor(int row, int col)
	{	
		string result = "";
		if (new Point(row, col) == Snake[0])
		{
			result = "DarkGreen";
		}
		else if (Point.ContainsInList(new Point(row, col), Snake))
		{
			result = "Lime";
		}
		else if (Point.ContainsInList(new Point(row, col), Apple))
		{
			result = "Red";
		}
		else
		{
			result = "white";
		}
		//Console.WriteLine(row);
		//Console.WriteLine(col);
		//Console.WriteLine(result);
		return result;
	}

	private bool isRunning = false;
	private Timer timer;

	private void StartStopwatch()
	{
		if (!isRunning)
		{
			timer = new Timer(Update, null, 0, 200);
			isRunning = true;
		}
	}

	private void StopStopwatch()
	{
		if (isRunning)
		{
			timer?.Dispose();
			isRunning = false;
		}
	}

	private void ResetStopwatch()
	{
		Initial();
		StopStopwatch();
	}

	private void Next()
	{
		//Console.WriteLine("Direction");
		//Console.WriteLine(Direction);
		if (CheckOutOfBounds(Snake[0] + Direction) || Snake.Count != Snake.Distinct().Count())
		{
			ResetStopwatch();
		}
		else
		{
			Snake.Insert(0, Snake[0] + Direction);
			if (Direct.Count != 0)
			{
				Direction = Direct[0];
				Direct.RemoveAt(0);
			}
			if (Snake[0].ContainsInList(Apple))
			{
				Apple.RemoveAt(0);
				Score++;
				Apple.Add(SpawnApple());
			}
			else
			{
				Snake.RemoveAt(Snake.Count - 1);
			}
		}		
	}

	private void Update(object state)
	{
		Next();
		InvokeAsync(StateHasChanged);
	}

	private void KeyHandler(KeyboardEventArgs e)
	{
		if (e.Key == "ArrowLeft")
		{
			if ((Direct.Count == 0 && Direction != new Point(0, 1)) || (Direct.Count > 0 && Direct[Direct.Count - 1] != new Point(0, 1)))
			{
				Direct.Add(new Point(0, -1));
			}
		}
		else if (e.Key == "ArrowRight")
		{
			if ((Direct.Count == 0 && Direction != new Point(0, -1)) || (Direct.Count > 0 && Direct[Direct.Count - 1] != new Point(0, -1)))
			{
				Direct.Add(new Point(0, 1));
			}
		}
		else if (e.Key == "ArrowUp")
		{
			if ((Direct.Count == 0 && Direction != new Point(1, 0)) || (Direct.Count > 0 && Direct[Direct.Count - 1] != new Point(1, 0)))
			{
				Direct.Add(new Point(-1, 0));
			}
		}
		else if (e.Key == "ArrowDown")
		{
			if ((Direct.Count == 0 && Direction != new Point(-1, 0)) || (Direct.Count > 0 && Direct[Direct.Count - 1] != new Point(-1, 0)))
			{
				Direct.Add(new Point(1, 0));
			}
		}

		//Console.WriteLine("Direct");
		//for (int i = 0; i < Direct.Count; i++)
		//{
		//	Console.WriteLine(Direct[i]);
		//}

	}

	private bool CheckOutOfBounds(Point a)
	{
		bool result = false;
		if (a.X < 0 || a.X >= RowsAmount || a.Y < 0 || a.Y >= ColsAmount)
		{
			result = true;
		}
		return result;
	}

	private Random r = new Random();

	private Point SpawnApple()
	{
		Point result = new Point(r.Next(0, RowsAmount), r.Next(0, ColsAmount));
		while (result.ContainsInList(Snake) || result.ContainsInList(Apple))
		{
			result = new Point(r.Next(0, RowsAmount), r.Next(0, ColsAmount));
		}
		return result;
	}

	private void Initial()
	{
		Snake = new List<Point>
		{
			new Point(7, 4),
			new Point(7, 3),
			new Point(7, 2)
		};
		Apple = new List<Point>
		{
			new Point(7, 10)
		};
		Direction = new Point(0, 1);
		Direct = new List<Point>();
		Score = 0;
	}
}

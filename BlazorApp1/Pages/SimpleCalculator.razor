@page "/simplecalculator"

<div>
	<input @bind="Calculation" readonly/>
</div>

<div>
	<input @bind="Expression"/>
</div>

<div>
	<button @onclick="Percent">%</button>
	<button @onclick="ClearExpression">CE</button>
	<button @onclick="Clear">C</button>
	<button @onclick="Delete"><i class="fa-solid fa-delete-left"></i></button>
</div>

<div>
	<button @onclick="MultInverse">1/x</button>
	<button @onclick="Squared">x<sup>2</sup></button>
	<button @onclick="SquareRoot"><i class="fa-solid fa-square-root-variable"></i></button>
	<button @onclick="@(e => AddAct("/"))"><i class="fa-solid fa-divide"></i></button>
</div>

<div>
	<button @onclick="@(e => AddNum("7"))">7</button>
	<button @onclick="@(e => AddNum("8"))">8</button>
	<button @onclick="@(e => AddNum("9"))">9</button>
	<button @onclick="@(e => AddAct("*"))"><i class="fa-solid fa-xmark"></i></button>
</div>

<div>
	<button @onclick="@(e => AddNum("4"))">4</button>
	<button @onclick="@(e => AddNum("5"))">5</button>
	<button @onclick="@(e => AddNum("6"))">6</button>
	<button @onclick="@(e => AddAct("-"))">-</button>
</div>

<div>
	<button @onclick="@(e => AddNum("1"))">1</button>
	<button @onclick="@(e => AddNum("2"))">2</button>
	<button @onclick="@(e => AddNum("3"))">3</button>
	<button @onclick="@(e => AddAct("+"))">+</button>
</div>

<div>
	<button @onclick="AdditInverse"><i class="fa-solid fa-plus-minus"></i></button>
	<button @onclick="@(e => AddNum("0"))">0</button>
	<button @onclick="AddDot">.</button>
	<button @onclick="Equal">=</button>
</div>



@using System.Text.RegularExpressions;

@code {

	private string Expression = "0";

	private string First = "0";

	private string Second = "0";

	private string Action = "";

	private bool PressedAction = false;

	private bool PressedEqual = false;

	private string Calculation = "";

	private void AddSymbol(string a)
	{
		Expression += a;
	}

	private void ClearExpression()
	{
		Expression = "0";
		Second = "0";
		PressedAction = false;
		if (PressedEqual)
		{
			Calculation = "";
			First = "0";
			Action = "";
		}
		PressedEqual = false;
	}

	private void Clear()
	{
		Expression = "0";
		Calculation = "";
		First = "0";
		Second = "0";
		Action = "";
		PressedAction = false;
		PressedEqual = false;
	}

	private void Delete()
	{
		if (Expression.Length == 1 || Regex.Matches(Expression, @"[a-zA-Z]").Count > 0)
		{
			Expression = "0";
		}
		else if (Expression.Length > 1)
		{
			Expression = Expression.Remove(Expression.Length - 1);
		}
		PressedAction = false;
		PressedEqual = false;
	}

	private string Solve(string a, string act, string b)
	{
		var t1 = double.TryParse(a, System.Globalization.CultureInfo.InvariantCulture, out double num1);
		var t2 = double.TryParse(b, System.Globalization.CultureInfo.InvariantCulture, out double num2);
		double result = 0.0;
		if (act == "+")
		{
			result = num1 + num2;
		}
		else if (act == "-")
		{
			result = num1 - num2;
		}
		else if (act == "*")
		{
			result = num1 * num2;
		}
		else if (act == "/")
		{
			result = num1 / num2;
		}
		return result.ToString(System.Globalization.CultureInfo.InvariantCulture);
	}

	private void Percent()
	{
		var b = double.TryParse(Expression, System.Globalization.CultureInfo.InvariantCulture, out double a);
		Calculation = Expression + "%";
		Expression = (a / 100).ToString(System.Globalization.CultureInfo.InvariantCulture);
		PressedAction = false;
		PressedEqual = false;
	}

	private void MultInverse()
	{
		var b = double.TryParse(Expression, System.Globalization.CultureInfo.InvariantCulture, out double a);
		Calculation = "1/(" + Expression + ")";
		Expression = (1 / a).ToString(System.Globalization.CultureInfo.InvariantCulture);
		PressedAction = false;
		PressedEqual = false;
	}

	private void Squared()
	{
		var b = double.TryParse(Expression, System.Globalization.CultureInfo.InvariantCulture, out double a);
		Calculation = "sqr(" + Expression + ")";
		Expression = (a * a).ToString(System.Globalization.CultureInfo.InvariantCulture);
		PressedAction = false;
		PressedEqual = false;
	}

	private void SquareRoot()
	{
		var b = double.TryParse(Expression, System.Globalization.CultureInfo.InvariantCulture, out double a);
		Calculation = "sqrt(" + Expression + ")";
		Expression = (Math.Sqrt(a)).ToString(System.Globalization.CultureInfo.InvariantCulture);
		PressedAction = false;
		PressedEqual = false;
	}

	private void AdditInverse()
	{
		var b = double.TryParse(Expression, System.Globalization.CultureInfo.InvariantCulture, out double a);
		if (a == 0.0)
		{
			Expression = "0";
		}
		else
		{
			Expression = (-a).ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
		PressedAction = false;
		PressedEqual = false;
	}

	private void AddDot()
	{
		if (!Expression.Contains('.'))
		{
			Expression += ".";
		}
		PressedAction = false;
		PressedEqual = false;
	}

	private void AddNum(string a)
	{
		if (PressedEqual)
		{
			Calculation = "";
		}
		if (Expression == "0" || PressedAction)
		{
			Expression = a;
		}
		else
		{
			Expression += a;
		}
		PressedAction = false;
		PressedEqual = false;
	}

	private void AddAct(string a)
	{
		if (!PressedAction)
		{
			if (Action != "")
			{
				Second = Expression;
				Expression = Solve(First, Action, Second);
			}
			First = Expression;
			PressedAction = true;
		}
		Action = a;
		Calculation = First + Action;
		PressedEqual = false;
	}

	private void Equal()
	{
		if (Action != "")
		{
			if (!PressedAction)
			{
				Second = Expression;
			}
			Expression = Solve(First, Action, Second);
			Calculation = First + Action + Second + "=";
			First = Expression;
		}
		PressedAction = true;
		PressedEqual = true;
	}

}

@page "/sudoku"

<div class="parent" style="user-select: none">
    <div id="field">
        @for (int i = 0; i < RowsAmount; i++)
        {
            for (int j = 0; j < ColsAmount; j++)
            {
                int temp_i = i;
                int temp_j = j;
                <div id="field-cell" @onclick="() => ClickOnField(temp_i, temp_j)"
                    style="background: @BackgroundColorCell(temp_i, temp_j);
                    color: @TextColorCell(temp_i, temp_j);">
                    <div id="celltext">@ReturnFieldCell(temp_i, temp_j)</div>
                    <div id="note">
                        @for (int k = 0; k < 9; k++)
                        {
                            int temp_k = k;
                            <div id="note-cell">@ReturnNoteCell(temp_i, temp_j, temp_k)</div>
                        }
                    </div>
                </div>
            }
        }
    </div>
    <div style="margin-left: 15px; margin-top: -15px;">
        <div class="parent">
            <div id="timer">@timeSpan.ToString(@"mm\:ss")</div>
            <div id="playbutton" @onclick="PlayStopwatch">
                <div id="centered" class=@PlayClass style=@PlayStyle></div>
            </div>
        </div>
        <div class="parent" style="width: 100%; margin-top: 8px; margin-bottom: 5px;">
            <div id="circlebutton" style="margin-right: 3px;" @onclick="Cancel">
                <div id="centered">Cancel</div>
            </div>
            <div id="circlebutton" style="margin-left: 3px; margin-right: 3px;" @onclick="Clear">
                <div id="centered">Clear</div>
            </div>
            <div id="noteswitch" style="margin-left: 3px; margin-right: 3px;" class=@SolNoteClass @onclick="ClickSolNote">
                <div id="centered">Notes</div>
                <div id="switcher" class=@SolNoteClass>
                    <div id="centered">@SolNoteClass.ToUpper()</div>
                </div>
            </div>
            <div id="circlebutton" style="margin-left: 3px;" @onclick="Hint">
                <div id="centered">Hint</div>
            </div>
        </div>
        <div id="numpad">
            @for (int i = 0; i < 9; i++)
            {
                int temp_i = i;
                <div id="numpad-cell" @onclick="() => ClickOnNumpad(temp_i + 1)">@(i + 1)</div>
            }
        </div>
        <div id="ngbutton" @onclick="NewGame">
            <div id="centered">New Game</div>
        </div>
    </div>
</div>

@code {

    private int RowsAmount = 9;

    private int ColsAmount = 9;

    private SudokuProblem sudoku = new SudokuProblem();

    private int[,] Field = new int[9, 9];

    private int[,] Solution = new int[9, 9];

    private int[,] Problem = new int[9, 9];

    private int[,,] Note = new int[9, 9, 9];

    private List<int[,]> PastField = new();

    private List<int[,,]> PastNote = new();

    private List<Point> PastHighlight = new();

    private Point HighlightCell = new Point();

    private bool SolNote = true;

    private string SolNoteClass = "off";

    private TimeSpan timeSpan;

    private bool isRunning = false;

    private DateTime startTime;

    private Timer timer;

    private string PlayClass = "fa fa-play";

    private string PlayStyle = "font-size: 16px; margin-left: 1px;";

    private void PlayStopwatch()
    {
        //Console.WriteLine("check");
        if (!isRunning)
        {
            startTime = DateTime.Now - timeSpan;
            timer = new Timer(UpdateTime, null, 0, 100);
            isRunning = true;
            PlayClass = "fa fa-pause";
            PlayStyle = "font-size: 16px;";
        }
        else
        {
            timer?.Dispose();
            isRunning = false;
            PlayClass = "fa fa-play";
            PlayStyle = "font-size: 16px; margin-left: 1px;";
        }
    }

    //private void StopStopwatch()
    //{
    //    if (isRunning)
    //    {
    //        timer?.Dispose();
    //        isRunning = false;
    //        PlayClass = "fa fa-play";
    //    }
    //}

    //private void ResetStopwatch()
    //{
    //    StopStopwatch();
    //    timeSpan = TimeSpan.Zero;
    //}

    private bool ArraysEqual(int[,] a, int[,] b)
    {
        for(int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                //Console.WriteLine($"kek {a[i, j]} {b[i, j]}");
                if (a[i, j] != b[i, j])
                {
                    //Console.WriteLine("kek");
                    return false;
                }
            }
        }
        return true;
    }

    private void Update()
    {
        //add check if game is over
        //if (ArraysEqual(Field, Solution))
        //{
        //    Console.WriteLine("congratulation");
        //    PlayStopwatch();
        //}
    }

    private void UpdateTime(object state)
    {
        timeSpan = DateTime.Now - startTime;
        Update();
        InvokeAsync(StateHasChanged);
    }

    private void ClickOnField(int i, int j)
    {
        HighlightCell = new Point(i, j);
    }

    private void ClickOnNumpad(int i)
    {
        int x = (int)HighlightCell.X;
        int y = (int)HighlightCell.Y;
        //Console.WriteLine($"{Problem[x, y]} {Field[x, y]} {Solution[x, y]}");
        if (Problem[x, y] == 0)
        {
            //add current Field to Past
            PastField.Add(Field.Clone() as int[,]);
            PastNote.Add(Note.Clone() as int[,,]);
            PastHighlight.Add(HighlightCell);

            if (SolNote)
            {
                if (Field[x, y] != i)
                {
                    //null all notes of number i in row, col, big cell
                    for (int k = 0; k < 9; k++)
                    {
                        Note[k, y, i - 1] = 0;
                        Note[x, k, i - 1] = 0;
                    }
                    for (int k = (x / 3) * 3; k < (x / 3) * 3 + 3; k++)
                    {
                        for (int l = (y / 3) * 3; l < (y / 3) * 3 + 3; l++)
                        {
                            Note[k, l, i - 1] = 0;
                        }
                    }
                    //null all notes in cell x,y
                    for (int k = 0; k < 9; k++)
                    {
                        Note[x, y, k] = 0;
                    }
                    Field[x, y] = i;
                }
                else Field[x, y] = 0;
            }
            else
            {
                if (Note[x, y, i - 1] != i)
                {
                    Field[x, y] = 0;
                    Note[x, y, i - 1] = i;
                }
                else Note[x, y, i - 1] = 0;
            }
        }
        //Console.WriteLine($"{Problem[x, y]} {Field[x, y]} {Solution[x, y]}");
        //Console.WriteLine("kek");
        //for (int k = 0; k < 9; k++)
        //{
        //    for (int l = 0; l < 9; l++)
        //    {
        //        Console.WriteLine($"{Problem[k, l]} {Field[k, l]} {Solution[k, l]}");
        //    }
        //}
        //Console.WriteLine("kekw");
    }

    private string ReturnFieldCell(int i, int j)
    {
        string result = "";
        if (Field[i, j] != 0) result = Field[i, j].ToString();
        return result;
    }

    private string ReturnNoteCell(int i, int j, int k)
    {
        string result = "";
        if (Note[i, j, k] != 0) result = Note[i, j, k].ToString();
        return result;
    }

    private bool IsValidCell(int i, int j)
    {
        if (Field[i, j] != Solution[i, j]) return false;
        for (int k = 0; k < 9; k++)
        {
            if (Field[k, j] != Solution[k, j] || Field[i, k] != Solution[i, k]) return false;
        }
        for (int k = (i / 3) * 3; k < (i / 3) * 3 + 3; k++)
        {
            for (int l = (j / 3) * 3; l < (j / 3) * 3 + 3; l++)
            {
                if (Field[k, l] != Solution[k, l]) return false;
            }
        }
        return true;
    }

    private bool IsValidField()
    {
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (!IsValidCell(i, j)) return false;
            }
        }
        return true;
    }

    private string BackgroundColorCell(int i, int j)
    {
        string result = "white";
        if (new Point(i, j) == HighlightCell) result = "#bbdefb";
        else if ((Field[i, j] != Solution[i, j] || CheckPointNearInvalid(i, j, Field[i, j])) && Field[i, j] != 0) result = "#f7cfd6";
        else if (i == HighlightCell.X || j == HighlightCell.Y ||
            (i / 3 == (int)HighlightCell.X / 3 && j / 3 == (int)HighlightCell.Y / 3)) result = "#d3e3f1";   //"#e2ebf3";
        else if (Field[i, j] == Field[(int)HighlightCell.X, (int)HighlightCell.Y] && Field[i, j] != 0) result = "#a8c2d9";
        return result;
    }

    private List<Point> InvalidCells(int value)
    {
        List<Point> result = new();
        for (int i = 0; i < 9; i++)
        {
            for (int j = 0; j < 9; j++)
            {
                if (Field[i, j] != Solution[i, j] && Field[i, j] == value) result.Add(new(i, j));
            }
        }
        return result;
    }

    private bool CheckPointNearInvalid(int i, int j, int value)
    {
        List<Point> cells = InvalidCells(value);
        for (int k = 0; k < cells.Count; k++)
        {
            if (i == cells[k].X || j == cells[k].Y ||
            (i / 3 == (int)cells[k].X / 3 && j / 3 == (int)cells[k].Y / 3)) return true;
        }
        return false;
    }


    private string TextColorCell(int i, int j)
    {
        string result = "";
        if (Field[i, j] == Problem[i, j]) result = "black";
        else if (Field[i, j] == Solution[i, j]) result = "rgb(0, 114, 227)";
        else if (Field[i, j] != Solution[i, j]) result = "#e55c6c";
        return result;
    }

    private void ClickSolNote()
    {
        SolNote = !SolNote;
        if (SolNoteClass == "off") SolNoteClass = "on";
        else SolNoteClass = "off";
    }

    private string Visibility(int i, int j)
    {
        string result = "hidden";
        for (int k = 0; k < 9; k++)
        {
            if (Note[i, j, k] != 0) result = "visible";
        }
        return result;
    }

    private void NewGame()
    {
        Note = new int[9, 9, 9];
        //Field = sudoku.Transpose(Field);
        Solution = sudoku.CreateSolution();
        Problem = sudoku.CreateProblem(Solution.Clone() as int[,], 64);
        Field = Problem.Clone() as int[,];
        //Console.WriteLine("kek");
        //Console.WriteLine("Problem Field Solution");
        //for (int i = 0; i < 9; i++)
        //{
        //    for (int j = 0; j < 9; j++)
        //    {
        //        Console.WriteLine($"{Problem[i, j]} {Field[i, j]} {Solution[i, j]}");
        //    }
        //}
        //Console.WriteLine("kekw");
    }

    private void Hint()
    {
        int x = (int)HighlightCell.X;
        int y = (int)HighlightCell.Y;
        if (Problem[x, y] == 0) Field[x, y] = Solution[x, y];
    }

    private void Clear()
    {
        int x = (int)HighlightCell.X;
        int y = (int)HighlightCell.Y;
        if (Problem[x, y] == 0)
        {
            Field[x, y] = 0;
            for (int k = 0; k < 9; k++)
            {
                Note[x, y, k] = 0;
            }
        }
    }

    private void Cancel()
    {
        //for (int i = 0; i < Past.Count; i++)
        //{
        //    Console.WriteLine("start");
        //    for (int j = 0; j < 9; j++)
        //    {
        //        for (int k = 0; k < 9; k++)
        //        {
        //            Console.WriteLine(Past[i][j, k]);
        //        }
        //    }
        //    Console.WriteLine("end");
        //}
        if (PastField.Count > 0 && PastNote.Count > 0 && PastHighlight.Count > 0)
        {
            Field = PastField[^1];
            Note = PastNote[^1];
            HighlightCell = PastHighlight[^1];

            PastField.RemoveAt(PastField.Count - 1);
            PastNote.RemoveAt(PastNote.Count - 1);
            PastHighlight.RemoveAt(PastHighlight.Count - 1);
        }
    }

}
